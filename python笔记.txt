------------------------------------------------
1.类型

Numbers（数字）
String（字符串）
List（列表）
Tuple（元组）
Dictionary（字典）

------------------------------------------------
2.文件头

A.默认
#!/usr/bin/python

B.编码
# -*- coding: UTF-8 -*-
或
# coding=utf-8

------------------------------------------------
3.运算

运算符	描述	实例
+	加
-	减
*	乘
/	除
%	取模
**	幂 - 返回x的y次幂	a**b 为10的20次方， 输出结果 100000000000000000000
//	取整除 - 返回商的整数部分（向下取整


------------------------------------------------
4.条件

if 判断条件1:
    执行语句1……
elif 判断条件2:
    执行语句2……
else:
    执行语句3……


------------------------------------------------
5.循环

break 语句	在语句块执行过程中终止循环，并且跳出整个循环
continue 语句	在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。
pass 语句	pass是空语句，是为了保持程序结构的完整性。


while 判断条件：
    执行语句……
else:
    结束语句……

for item in list:
    执行语句……
else:
    结束语句……


------------------------------------------------
6.列表

A.初始化
list = []

B.新增
list.append(item)

C.删除
del list[0]

D.长度
len(list)

E.合并
list1+list2

F.container判断
(item in list)

G.范围取
list[start:end:step]  索引start到end-1,步长为step


------------------------------------------------
7.时间(time)

A.获取时间对象
time.localtime(时间戳)

B.获取时间戳
time.time()

C.时间对象转字符串
time.strftime("%Y-%m-%d %H:%M:%S", 时间对象)

D.字符串转时间对象
time.strptime("2019-8-7","%Y-%m-%d")

E.等待
time.sleep(秒数)


------------------------------------------------
8.异常

A.捕捉异常
try:
<语句>        #运行别的代码
except <名字>：
<语句>        #如果在try部份引发了'name'异常
except <名字>，<数据>:
<语句>        #如果引发了'name'异常，获得附加的数据
else:
<语句>        #如果没有异常发生

B.抛出异常
raise Exception(消息,追踪属性)


------------------------------------------------
9.对象

A.构造函数
def __init__( self, x=0, y=0):

B.摧毁函数
def __del__(self):

C.toString
def __str__( self ):

D.对象比较
def __cmp__ ( self, x ):

E.继承
class className(parentName)

F.私有
__开头的为私有属性和私有方法


------------------------------------------------
10.json

A.将 Python 对象编码成 JSON 字符串
json.dumps

B.将已编码的 JSON 字符串解码为 Python 对象
json.loads